name: Deploy Backend to Staging

on:
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::132418765186:role/nicsan-crm-deployer
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nicsan-crm-api
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          cd nicsan-crm-backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS task definition
        id: update-task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nicsan-crm-api
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          TASK_DEFINITION_ARN=$(aws ecs describe-services \
            --cluster nicsan-backend-cluster \
            --services nicsan-backend-staging \
            --query 'services[0].taskDefinition' \
            --output text)
          
          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_ARN \
            --query 'taskDefinition' > task-definition.json
          
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition.json > updated-task-definition.json
          
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
            updated-task-definition.json > final-task-definition.json
          
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "new-task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        env:
          NEW_TASK_DEF_ARN: ${{ steps.update-task-def.outputs.new-task-def-arn }}
        run: |
          aws ecs update-service \
            --cluster nicsan-backend-cluster \
            --service nicsan-backend-staging \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster nicsan-backend-cluster \
            --services nicsan-backend-staging

      - name: Verify deployment
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster nicsan-backend-cluster \
            --services nicsan-backend-staging \
            --query 'services[0].status' \
            --output text)
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster nicsan-backend-cluster \
            --services nicsan-backend-staging \
            --query 'services[0].runningCount' \
            --output text)
          
          DESIRED_COUNT=$(aws ecs describe-services \
            --cluster nicsan-backend-cluster \
            --services nicsan-backend-staging \
            --query 'services[0].desiredCount' \
            --output text)
          
          if [ "$SERVICE_STATUS" = "ACTIVE" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
            echo "✅ Staging backend deployment successful!"
          else
            echo "❌ Deployment may have issues"
            exit 1
          fi