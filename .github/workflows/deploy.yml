name: Deploy to AWS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # === Existing backend env (UNCHANGED) ===
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: "132418765186"
  ECR_REPOSITORY: "nicsan-crm-api"
  ECS_CLUSTER: "nicsan-backend-cluster"
  ECS_SERVICE: "nicsan-backend-svc"
  TASK_FAMILY: "nicsan-backend-task"
  CONTAINER_NAME: "backend"

  # === Frontend deploy env (NEW) ===
  FRONTEND_DIR: ./                # repo path where package.json + vite.config.ts exist
  S3_BUCKET: nicsan-crm-frontend      # <<< REPLACE with your S3 bucket
  CF_DISTRIBUTION_ID: E3NW822N1SKA1U         # <<< REPLACE with your CloudFront Distribution ID

jobs:
  # ==========================
  # Backend ECS deploy (AS-IS)
  # ==========================
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo role arn
        run: echo "ROLE_TO_ASSUME=arn:aws:iam::132418765186:role/gha-ecs-deployer-nicsan-v2"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::132418765186:role/gha-ecs-deployer-nicsan-v2
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure backend Dockerfile exists at expected path
        shell: bash
        run: |
          set -e
          TARGET_DIR="nicsan-crm-backend"
          TARGET_FILE="$TARGET_DIR/Dockerfile"
          if [ -f "$TARGET_FILE" ]; then
            echo "‚úì Found $TARGET_FILE"; exit 0
          fi
          echo "No Dockerfile at $TARGET_FILE. Searching repository..."
          FOUND=$(find . -maxdepth 3 -type f -name Dockerfile | head -n 1 || true)
          if [ -n "$FOUND" ]; then
            echo "Linking $FOUND -> $TARGET_FILE"
            mkdir -p "$TARGET_DIR"
            ln -s "$(realpath "$FOUND")" "$TARGET_FILE"
            ls -la "$TARGET_DIR"
            exit 0
          fi
          echo "‚ùå No Dockerfile found anywhere."; exit 1

      - name: Build, tag, and push image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -e
          BUILD_TAG="prod-$(date +%Y%m%d%H%M%S)"
          IMAGE_URI="$REGISTRY/${{ env.ECR_REPOSITORY }}:$BUILD_TAG"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "Building:  $IMAGE_URI"
          docker build -f nicsan-crm-backend/Dockerfile -t "$IMAGE_URI" nicsan-crm-backend
          echo "Pushing:   $IMAGE_URI"
          docker push "$IMAGE_URI"

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query taskDefinition > task-def.json

      - name: Sanitize task definition for ECS register
        shell: bash
        run: |
          set -e
          jq '{
            family: .family,
            taskRoleArn: .taskRoleArn,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: (
              .containerDefinitions
              | map(del(
                  .enableFaultInjection,
                  .repositoryCredentials,
                  .firelensConfiguration,
                  .systemControls,
                  .ulimits,
                  .credentialSpecs
                ))
            ),
            volumes: .volumes,
            placementConstraints: .placementConstraints,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory,
            pidMode: .pidMode,
            ipcMode: .ipcMode,
            proxyConfiguration: .proxyConfiguration,
            inferenceAccelerators: .inferenceAccelerators,
            ephemeralStorage: .ephemeralStorage,
            runtimePlatform: .runtimePlatform
          } | del(.. | nulls)' task-def.json > task-def.clean.json
          mv task-def.clean.json task-def.json
          echo "‚úÖ task-def.json sanitized"

      - name: Render container image into task-def (jq)
        run: |
          set -e
          jq --arg img "${IMAGE_URI}" --arg name "${CONTAINER_NAME}" \
            '(.containerDefinitions[] | select(.name==$name) | .image) = $img' \
            task-def.json > task-def.rendered.json
          mv task-def.rendered.json task-def.json
          echo "üîß Image set to ${IMAGE_URI}"

      - name: Register task definition (CLI)
        id: reg
        run: |
          set -e
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASKDEF_ARN=$ARN" >> $GITHUB_ENV
          echo "üÜï Registered: $ARN"

      - name: Update service & wait for stability (CLI)
        run: |
          set -e
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${TASKDEF_ARN}" \
            --force-new-deployment >/dev/null
          aws ecs wait services-stable \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}"
          echo "‚úÖ Service stable"

      - name: Debug GitHub Context
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Expected: repo:NicsanIN/nicsan_crm-Deployed:ref:refs/heads/main"
          echo "Actual: repo:${{ github.repository }}:${{ github.ref }}"

      - name: DEBUG ‚Äî show OIDC claims
        if: always()
        shell: bash
        run: |
          set +e
          TOK_JSON=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
          TOK=$(echo "$TOK_JSON" | jq -r .value)
          echo "$TOK" | cut -d '.' -f2 | base64 -d 2>/dev/null | jq '{iss, aud, sub}' || true

  # ===========================================
  # Preflight: build FE & assert no localhost
  # (NEW ‚Äî does not affect backend job above)
  # ===========================================
  check_frontend_env:
    name: Check Frontend Bundle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install deps
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Show .env.production presence
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          if [ -f ".env.production" ]; then
            echo "‚úî .env.production exists"
            echo "----- first few lines -----"
            head -n 20 .env.production || true
            echo "---------------------------"
          else
            echo "‚ùå .env.production missing"; exit 1
          fi

      - name: Build (prod mode)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx vite build

      - name: Assert no localhost:3001 in dist
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          if grep -R "localhost:3001" dist/; then
            echo "‚ùå Found localhost:3001 in built bundle"; exit 1
          fi
          echo "‚úî No localhost:3001 in built bundle"

  # =========================================
  # Frontend deploy to S3 + CloudFront (NEW)
  # =========================================
  deploy_frontend:
    name: Build & Deploy Frontend
    runs-on: ubuntu-latest
    needs:
      - deploy              # wait for backend (optional; safe)
      - check_frontend_env  # ensure bundle is clean

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install deps
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build (prod mode)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx vite build

      # HTML served no-cache; assets long-cache
      - name: Prepare cache headers
        run: |
          echo "Assets will be uploaded with Cache-Control: max-age=31536000"
          echo "index.html will be uploaded with Cache-Control: no-cache"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/gha-ecs-deployer-nicsan-v2
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload static assets to S3
        run: |
          aws s3 sync "${{ env.FRONTEND_DIR }}/dist/" "s3://${{ env.S3_BUCKET }}/" \
            --cache-control max-age=31536000,public --delete
          # Re-upload HTML with no-cache so clients fetch latest
          aws s3 cp "${{ env.FRONTEND_DIR }}/dist/index.html" "s3://${{ env.S3_BUCKET }}/index.html" \
            --cache-control no-cache --content-type text/html

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ env.CF_DISTRIBUTION_ID }}" \
            --paths "/*"
