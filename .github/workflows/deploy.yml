name: Deploy backend to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent overlapping deploys on the same branch
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: "132418765186"
  ECR_REPO: nicsan-crm-api
  ECS_CLUSTER: nicsan-crm
  ECS_SERVICE: nicsan-backend-svc
  ECS_TASK_FAMILY: nicsan-backend-task
  CONTAINER_NAME: backend
  BUILD_CONTEXT: nicsan-crm-backend            # <- change if your backend folder is different
  DOCKERFILE: nicsan-crm-backend/Dockerfile    # <- change if your Dockerfile location differs

jobs:
  deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write         # OIDC
      contents: read

    steps:
      - name: Checkout
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::132418765186:role/GithubActionsDeploy-Backend
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        id: build
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}
          TAG=prod-${GITHUB_SHA::12}
          echo "IMAGE_URI=${IMAGE_URI}:${TAG}" >> $GITHUB_OUTPUT

          docker build -f "${DOCKERFILE}" -t "${IMAGE_URI}:${TAG}" "${BUILD_CONTEXT}"
          docker push "${IMAGE_URI}:${TAG}"
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
          ECR_REPO: ${{ env.ECR_REPO }}
          DOCKERFILE: ${{ env.DOCKERFILE }}
          BUILD_CONTEXT: ${{ env.BUILD_CONTEXT }}

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${ECS_TASK_FAMILY}" \
            --query 'taskDefinition' \
            --output json > td.json

      - name: Create new task definition with new image
        run: |
          NEW_IMAGE="${{ steps.build.outputs.IMAGE_URI }}"
          # Strip fields AWS won't accept on register
          cat td.json \
            | jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy,.deregisteredAt)' \
            | jq --arg IMG "$NEW_IMAGE" --arg NAME "${CONTAINER_NAME}" \
                 '(.containerDefinitions[] | select(.name==$NAME) | .image) |= $IMG' \
            > td.effective.json

          echo "Registering new task def..."
          TD_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://td.effective.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          echo "TD_ARN=$TD_ARN" >> $GITHUB_ENV

      - name: Update service to new task definition
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${TD_ARN}" \
            --force-new-deployment \
            --region "${AWS_REGION}"

      - name: Show deployment status
        run: |
          aws ecs describe-services --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" \
            --query 'services[0].deployments[*].{id:id,status:status,desired:desiredCount,running:runningCount,createdAt:createdAt}' \
            --output table
