name: deploy

on:
  push:
    branches: [ "main" ]

# REQUIRED for OIDC + aws-actions/configure-aws-credentials
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: "132418765186"
  # Change if your ECR repo name is different
  ECR_REPOSITORY: "nicsan-crm-api"
  # ECS resources
  ECS_CLUSTER: "nicsan-backend-cluster"
  ECS_SERVICE: "nicsan-backend-svc"
  TASK_FAMILY: "nicsan-backend-task"
  # Name of the container in your task definition
  CONTAINER_NAME: "backend"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- OIDC + AWS credentials (minimal header requirement) ---
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::132418765186:role/GitHubActionsDeploy-Backend
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
      # ------------------------------------------------------------

      # Optional: uncomment to inspect claims if you still see OIDC issues
      # - name: Debug OIDC claims (temporary)
      #   shell: bash
      #   run: |
      #     echo "repo=${{ github.repository }}"
      #     echo "ref=${{ github.ref }}"
      #     echo "actor=${{ github.actor }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "Building image..."
          docker build \
            -f nicsan-crm-backend/Dockerfile \
            -t "$REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" \
            nicsan-crm-backend

          echo "Pushing image..."
          docker push "$REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

          echo "IMAGE_URI=$REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query taskDefinition > task-def.json

      - name: Render task definition with new image
        id: render-tdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-tdef.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
