name: deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "nicsan-crm-backend/**"
      - ".github/workflows/deploy.yml"

permissions:
  id-token: write   # OIDC
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ROLE_ARN:   ${{ secrets.AWS_ROLE_ARN }}
  ECR_REPO:   ${{ secrets.ECR_REPO }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  TASK_FAMILY: ${{ secrets.TASK_FAMILY }}
  CONTAINER:   ${{ secrets.CONTAINER }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f nicsan-crm-backend/Dockerfile -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG nicsan-crm-backend
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Get current task def
        run: |
          aws ecs describe-task-definition --task-definition "$TASK_FAMILY" \
            --query "taskDefinition" > taskdef.json

      - name: Update image in task def
        run: |
          # Replace the container image (must match your container name exactly)
          IMAGE_URI="${IMAGE_URI}"
          CONTAINER="${CONTAINER}"

          # jq to patch the image & strip fields ECS forbids on register
          jq --arg c "$CONTAINER" --arg i "$IMAGE_URI" '
            .containerDefinitions |=
              (map(if .name == $c then .image = $i else . end)) |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes,
                .compatibilities, .registeredAt, .registeredBy)
          ' taskdef.json > taskdef.effective.json

      - name: Register new task def
        id: register
        run: |
          ARN=$(aws ecs register-task-definition \
              --cli-input-json file://taskdef.effective.json \
              --query "taskDefinition.taskDefinitionArn" -o text)
          echo "TD_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Deploy service
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "${{ steps.register.outputs.TD_ARN }}" \
            --force-new-deployment > /dev/null

      - name: Wait for stable
        run: |
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
          echo "âœ… ECS service is stable."
