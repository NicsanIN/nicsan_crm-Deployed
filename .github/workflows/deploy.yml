name: Deploy to AWS
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: "132418765186"
  ECR_REPOSITORY: "nicsan-crm-api"
  ECS_CLUSTER: "nicsan-backend-cluster"
  ECS_SERVICE: "nicsan-backend-svc"
  TASK_FAMILY: "nicsan-backend-task"
  CONTAINER_NAME: "backend"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Required to checkout code
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # prove exactly which ARN this run will assume
      - name: Echo role arn
        run: echo "ROLE_TO_ASSUME=arn:aws:iam::132418765186:role/gha-ecs-deployer-nicsan-v2"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # If you didn't create the new role, switch this back to your existing role ARN
          role-to-assume: arn:aws:iam::132418765186:role/gha-ecs-deployer-nicsan-v2
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Ensure backend Dockerfile exists at expected path
        shell: bash
        run: |
          set -e
          TARGET_DIR="nicsan-crm-backend"
          TARGET_FILE="$TARGET_DIR/Dockerfile"

          if [ -f "$TARGET_FILE" ]; then
            echo "✓ Found $TARGET_FILE"
            exit 0
          fi

          echo "No Dockerfile at $TARGET_FILE. Searching repository..."
          FOUND=$(find . -maxdepth 3 -type f -name Dockerfile | head -n 1 || true)

          if [ -n "$FOUND" ]; then
            echo "Linking $FOUND -> $TARGET_FILE"
            mkdir -p "$TARGET_DIR"
            ln -s "$(realpath "$FOUND")" "$TARGET_FILE"
            ls -la "$TARGET_DIR"
            exit 0
          fi

          echo "❌ No Dockerfile found anywhere. Repository tree (depth 2):"
          find . -maxdepth 2 -type d -print
          exit 1


      - name: Build, tag, and push image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -e
          BUILD_TAG="prod-$(date +%Y%m%d%H%M%S)"
          IMAGE_URI="$REGISTRY/${{ env.ECR_REPOSITORY }}:$BUILD_TAG"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

          echo "Building:  $IMAGE_URI"
          docker build -f nicsan-crm-backend/Dockerfile -t "$IMAGE_URI" nicsan-crm-backend

          echo "Pushing:   $IMAGE_URI"
          docker push "$IMAGE_URI"

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query taskDefinition > task-def.json
        
      - name: Sanitize task definition for ECS register
        shell: bash
        run: |
          set -e
          # Rebuild a clean RegisterTaskDefinition payload and drop unknown/read-only keys
          jq '{
            family: .family,
            taskRoleArn: .taskRoleArn,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: (
              .containerDefinitions
              | map(del(
                  .enableFaultInjection,          # <-- drop the culprit
                  .repositoryCredentials,
                  .firelensConfiguration,
                  .systemControls,
                  .ulimits,
                  .credentialSpecs
                ))
            ),
            volumes: .volumes,
            placementConstraints: .placementConstraints,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory,
            pidMode: .pidMode,
            ipcMode: .ipcMode,
            proxyConfiguration: .proxyConfiguration,
            inferenceAccelerators: .inferenceAccelerators,
            ephemeralStorage: .ephemeralStorage,
            runtimePlatform: .runtimePlatform
          }' task-def.json > task-def.clean.json
          mv task-def.clean.json task-def.json
          echo "✅ task-def.json sanitized"

      - name: Render task definition with new image
        id: render-tdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-tdef.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: DEBUG — show OIDC claims
        if: always()
        shell: bash
        run: |
          set +e
          TOK_JSON=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
          TOK=$(echo "$TOK_JSON" | jq -r .value)
          echo "$TOK" | cut -d '.' -f2 | base64 -d 2>/dev/null | jq '{iss, aud, sub}' || true
